import tkinter as tk
from PIL import Image, ImageTk

class BombillaGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Control de Bombillas")
        self.master.geometry("800x900")

        self.bombillas = [False, False, False, False, False]  # Estado inicial de las bombillas
        self.bombilla_timer = [None, None, None, None, None]  # Timer para el parpadeo de cada bombilla
        self.memorias = [[False] * 5, [False] * 5, [False] * 5]  # Estado inicial de las memorias
        self.memorias_guardadas = [False, False, False]  # Estado de las memorias guardadas
        self.borrar_pressed = [False, False, False]  # Estado de si el botón de borrar está pulsado
        self.borrar_start_time = [0, 0, 0]  # Tiempo de inicio de la pulsación del botón de borrar

        # Cargar las imágenes de las bombillas y ajustar su tamaño
        bulb_on_image = Image.open("bulb_on.png")
        bulb_on_image = bulb_on_image.resize((50, 50), Image.BILINEAR)
        self.bulb_on_img = ImageTk.PhotoImage(bulb_on_image)

        bulb_off_image = Image.open("bulb_off.png")
        bulb_off_image = bulb_off_image.resize((50, 50), Image.BILINEAR)
        self.bulb_off_img = ImageTk.PhotoImage(bulb_off_image)

        # Crear los faders para controlar las bombillas
        self.faders = []
        self.status_labels = []  # Lista para almacenar los labels de estado
        self.buttons = [] # Lista para almacenar los botones
        self.icons = [] # Lista para almacenar los iconos de las bombillas
        self.memoria_buttons = [] # Lista para almacenar los botones de memoria
        self.aplicar_buttons = []  # Lista para almacenar los botones de aplicar memoria
        self.borrar_buttons = []  # Lista para almacenar los botones de borrar memoria
        self.borrar_labels = []  # Lista para almacenar las etiquetas de "BORRADO" en rojo
        self.borrar_timers = []  # Lista para almacenar los timers de borrado
        for i in range(5):
            # Añadir iconos de bombillas encima de los faders
            icon_label = tk.Label(self.master, image=self.bulb_off_img)
            icon_label.grid(row=0, column=i, padx=20, pady=5)
            self.icons.append(icon_label)

            # Crear fader
            fader = tk.Scale(self.master, from_=0, to=100, orient=tk.VERTICAL, command=lambda val, idx=i: self.update_brightness(val, idx))
            fader.grid(row=1, column=i, padx=20, pady=20)
            self.faders.append(fader)

            # Añadir botones de encendido/apagado debajo de los faders
            button = tk.Button(self.master, text="Encender", command=lambda idx=i: self.toggle_bombilla(idx))
            button.grid(row=2, column=i, padx=20, pady=5)
            self.buttons.append(button)

            # Añadir labels de estado debajo de los botones
            status_label = tk.Label(self.master, text="Apagado", fg="red")  # Inicialmente apagado
            status_label.grid(row=3, column=i, padx=20, pady=5)
            self.status_labels.append(status_label)

        # Botón "Apagar todo"
        self.apagar_todo_button = tk.Button(self.master, text="Apagar todo", fg="black", command=self.apagar_todo)
        self.apagar_todo_button.grid(row=4, column=5, padx=20, pady=5)

        # Botones de memoria, botones de aplicar y botones de borrar
        for i in range(3):
            memoria_button = tk.Button(self.master, text=f"M{i+1}", fg="orange" if self.memorias_guardadas[i] else "black", width=10, height=2, command=lambda idx=i: self.guardar_memoria(idx))
            memoria_button.grid(row=4, column=i, padx=20, pady=5)
            self.memoria_buttons.append(memoria_button)

            aplicar_button = tk.Button(self.master, text="Aplicar", fg="orange" if self.memorias_guardadas[i] else "black", width=10, height=2, command=lambda idx=i: self.aplicar_memoria(idx))
            aplicar_button.grid(row=5, column=i, padx=20, pady=5)
            self.aplicar_buttons.append(aplicar_button)

            borrar_button = tk.Button(self.master, text="Borrar M", fg="black", width=10, height=2)
            borrar_button.grid(row=6, column=i, padx=20, pady=5)
            borrar_button.bind("<ButtonPress>", lambda event, idx=i: self.iniciar_borrado(event, idx))
            borrar_button.bind("<ButtonRelease>", lambda event, idx=i: self.detener_borrado(event, idx))
            self.borrar_buttons.append(borrar_button)

            # Etiqueta para mostrar "BORRADO" en rojo
            borrar_label = tk.Label(self.master, text="BORRADO", fg="red", font=("Arial", 10, "bold"))
            borrar_label.grid(row=7, column=i, padx=20, pady=5)
            borrar_label.grid_remove()  # Ocultar la etiqueta inicialmente
            self.borrar_labels.append(borrar_label)

            # Etiqueta para el contador de tiempo de borrado
            timer_label = tk.Label(self.master, text="", fg="black")
            timer_label.grid(row=8, column=i, padx=20, pady=5)
            self.borrar_timers.append(timer_label)

    def toggle_bombilla(self, idx):
        self.bombillas[idx] = not self.bombillas[idx]
        if self.bombillas[idx]:
            self.buttons[idx].configure(text="Apagar")
            self.icons[idx].configure(image=self.bulb_on_img)
            self.status_labels[idx].configure(text="Encendido", fg="green")
        else:
            self.buttons[idx].configure(text="Encender")
            self.icons[idx].configure(image=self.bulb_off_img)
            self.status_labels[idx].configure(text="Apagado", fg="red")

    def update_brightness(self, value, idx):
        # Aquí podrías implementar el control de la luminosidad de las bombillas
        pass

    def apagar_todo(self):
        for idx in range(5):
            self.bombillas[idx] = False
            self.buttons[idx].configure(text="Encender")
            self.icons[idx].configure(image=self.bulb_off_img)
            self.status_labels[idx].configure(text="Apagado", fg="red")

    def guardar_memoria(self, idx):
        if not self.memorias_guardadas[idx]:  # Verificar si la memoria no está guardada
            self.memorias[idx] = self.bombillas[:]
            self.memorias_guardadas[idx] = True
            self.memoria_buttons[idx].configure(fg="orange")

    def aplicar_memoria(self, idx):
        self.bombillas = self.memorias[idx][:]
        for idx, bombilla in enumerate(self.bombillas):
            if bombilla:
                self.buttons[idx].configure(text="Apagar")
                self.icons[idx].configure(image=self.bulb_on_img)
                self.status_labels[idx].configure(text="Encendido", fg="green")
            else:
                self.buttons[idx].configure(text="Encender")
                self.icons[idx].configure(image=self.bulb_off_img)
                self.status_labels[idx].configure(text="Apagado", fg="red")

    def iniciar_borrado(self, event, idx):
        self.borrar_pressed[idx] = True
        self.borrar_start_time[idx] = self.master.after(3000, lambda: self.borrar_memoria(idx))  # Comenzar temporizador de 3 segundos

    def detener_borrado(self, event, idx):
        self.borrar_pressed[idx] = False
        # Cancelar el temporizador si se suelta el botón antes de que expire
        self.master.after_cancel(self.borrar_start_time[idx])

    def borrar_memoria(self, idx):
        if self.borrar_pressed[idx]:  # Solo si el botón de borrar todavía está presionado
            self.memorias_guardadas[idx] = False
            self.memoria_buttons[idx].configure(fg="black")

            # Mostrar "BORRADO" en rojo durante un segundo
            self.borrar_labels[idx].grid(row=5, column=idx, padx=20, pady=5)
            self.master.after(1000, lambda: self.borrar_labels[idx].grid_remove())  # Ocultar la etiqueta después de 1 segundo
            self.borrar_pressed[idx] = False
            self.borrar_start_time[idx] = 0  # Reiniciar el tiempo de inicio
            self.borrar_timers[idx].configure(text="")
            # Cancelar el temporizador si se suelta el botón antes de que expire
            self.master.after_cancel(self.borrar_start_time[idx])

def main():
    root = tk.Tk()
    app = BombillaGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()



